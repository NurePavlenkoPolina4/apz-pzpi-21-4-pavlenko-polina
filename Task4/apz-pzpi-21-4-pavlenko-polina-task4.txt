1 МЕТА РОБОТИ

Розробити клієнтську / front-end частину програмної системи. Ця частина системи повинна підтримувати роботу клієнтів у веб-режимі та  забезпечувати адміністрування системи.. Створити UML діаграми прецедентів, компонентів, взаємодії та пакетів за темою програмна система для організації та керування домашньою бібліотекою.

2 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРЕДМЕТНОЇ ОБЛАСТІ
2.1 Розробка UML діаграми прецедентів

Діаграма прецедентів у мові UML служить для візуалізації того, як користувачі взаємодіють з системою, відображаючи різноманітні дії та їх зв'язки. UML-діаграма прецедентів ілюструє взаємодію користувачів з системою.
Актор «Користувач» є головним актором системи, він розширює можливості актора «Гість», який, у свою чергу, має доступ лише до реєстрації або входу у систему. «Користувач» може переглядати свої останні книжкові доповнення, керувати книжковою полицею та додавати нові книги. Додавання відбувається за ручним введенням користувачем ISBN номеру книги. Для управління полицею «Користувач» має можливість пошуку книжок за назвою, автором та ISBN, фільтрації за датою додання книги на полицю, назвою, автором та рейтингом, відповідно. Інформацію про кожну збережену книгу «Користувач» може доповнювати такими даними як: рейтинг, статус та особисті нотатки, або видаляти, відповідно.  
Також «Користувач» має доступ до особистого кабінету, де він має можливість редагувати конфіденційну інформацію, таку як пошта та пароль, та, за необхідності, «Користувач» має можливість вийти з системи. 
Зокрема акторів «Користувач» та  «Гість» у системі також є актор «Адміністратор», він має доступ до розширеної системи адміністрування, яка дозволяє йому мати доступ до управління даними користувачів. «Адміністратор» має можливість видалення та призначення ролей користувачам системи.
Також варто зазначити, що всі учасники системи мають можливість налаштування мови застосунку (українська або англійська).

2.2 Розробка UML діаграми компонентів

UML діаграма компонентів відображає структуру програмної системи на рівні компонентів та їх взаємозв’язків.
У розробленій схемі кожен компонент відображає відповідний компонент(або сторінку) реалізованого клієнтського застосунку. Головна сторінка є центральним компонентом, адже вона відображає декілька останніх доданих на полицю книжок, надає користувачеві доступ до книжкової полиці, сторінки додання книг та особистого кабінету. Головний компонент, так як і компонент «Книжкова полиця», надає доступ до компоненту «Книга», що представляє з себе сторінки з детальною інформацією про відповідні книги. Також головний компонент надає доступ до компонентів «Вхід» та «Реєстрація», вони є пов’язаними із компонентом особистого кабінету, через який здійснюється вихід з системи та перехід до сторінок входу та авторизації.  

2.3 Розробка UML діаграми взаємодії

UML діаграма взаємодії слугує для моделювання та ілюстрації спілкування між об'єктами або компонентами у системі, з метою відображення послідовності повідомлень або дій, які передаються між ними у різних сценаріях взаємодії. Діаграма ілюструє взаємодію користувача з клієнтським застосунком для додавання книги на "полицю".
Взаємодія починається із входом користувача у систему. У разі, якщо введені дані невірні – взаємодія завершується. У іншому випадку користувач отримує можливість надати ISBN книги, яку він бажає додати на полицю. Якщо ISBN розпізнано, його буде перевірено на наявність у поточного користувача, і у разі, якщо книга з таким номером вже збережена на полиці, буде повернуто відповідне повідомлення, у іншому випадку ISBN буде відправлено на сервер, якщо ж ISBN не є дійсним взаємодію буде завершено. Після того, як сервер проведе всі необхідні маніпуляції із отриманими даними, користувачу буде повернуто інформацію про додану книгу або помилку (якщо вона відбудеться на сервері), після чого взаємодія завершується.

2.4 Розробка UML діаграми пакетів

Діаграма пакетів використовується для візуалізації структури пакетів (групування елементів моделі) та залежностей між ними в системі.  
У діаграмі пакетів зображено головний компонент, позначений як «App», адже для побудови клієнтського застосунку було використано бібліотеку React. Цей компонент є центральною частиною додатку та імпортує різні пакети, щоб забезпечити його функціональність. Зокрема, «App» імпортує пакети «Стилі», «Сторінки», «Компоненти», «Хуки» та «Контекст».
Пакет «Сторінки» використовується для відображення різних сторінок або вікон у додатку. Він імпортує пакет «Стилі» для забезпечення зовнішнього вигляду сторінок та має доступ до пакету «Ресурси» для роботи з зображеннями, шрифтами та іншими допоміжними даними. Крім того, він використовує пакети «Хуки» та «Компоненти» для реалізації функціональності сторінок.
Пакет «Компоненти» представляє будівельні блоки інтерфейсу, які використовуються на різних сторінках клієнтського застосунку. Він має доступ до пакету «Ресурси» і використовує пакет «Хуки»  для забезпечення взаємодії з даними та функціональністю.
Пакет «Хуки» представляє набір допоміжний функцій, придатних для повторного використання. Він має доступ до пакету «Локалізації» для забезпечення локалізації тексту у застосунку і використовує пакет «Контекст» для обміну даними між різними компонентами.

3 ІНЖЕНЕРНІ РІШЕННЯ
3.1 Технічні рішення

Для розробки клієнтської частини програмної системи для організації та керування домашньою бібліотекою було використано бібліотеку React. React – це бібліотека JavaScript для розробки інтерфейсу користувача. Оскільки проєкт побудований на основі React, архітектура може бути названа «React архітектурою» або «Компонентною архітектурою з використанням React». Основна логіка проєкту базується на концепції компонентів. Кожна частина інтерфейсу (сторінки, блоки, елементи) представлена окремим компонентом, який може мати власний стан та змінювати свій вигляд відповідно до змін стану. Це робить архітектуру гнучкою та легко розширюваною.
Проєкт розділений на логічні модулі або компоненти, які відповідають за конкретну функціональність або частину інтерфейсу. Це дозволило зосередитися на конкретних частинах застосунку та легко керувати їх розробкою та підтримкою. Використання React хуків(допоміжних функцій) дозволило відокремити логіку компонентів від їх презентаційної частини, що зробило код більш чистим і зрозумілим. Також використовувався React контекст для обміну даними між різними компонентами без необхідності передачі даних через багато проміжних компонентів.
Архітектура проєкту орієнтована на модульність і легкість розширення. Кожен компонент або модуль розроблений, тестований і підтримуваний незалежно від інших, що спростило процес розробки та забезпечило гнучкість системи.

3.2 Розробка сторінок реєстрація та входу у систему

У розробці клієнтської частини для сторінок реєстрації та входу у систему основною метою було забезпечення безпеки та конфіденційності даних користувачів. У попередній лабораторній роботі при розробці серверної частини було використано JWT токени для автентифікації та авторизації користувачів. Щоб ефективно використати цей механізм підтвердження особи користувача, в клієнтській частині було використано контекст, адже він використовується для глобального зберігання та передачі даних по всьому додатку. Контекст було використано для відстеження статусу користувача (перевірка, чи автентифікований він) та захищення маршрутів, доступ до яких має бути обмежений.

3.3 Розробка головного функціоналу клієнтського застосунку 

Головною сторінкою нашого застосунку є "Книжкова Полиця", яка надає користувачеві можливість переглядати всі додані книги і виконувати пошук та сортування. Для отримання доступу до книжкової полиці на сервер відправляється відповідний запит, який містить JWT токен користувача в заголовку. Це зроблено для забезпечення безпечного доступу до даних та надання користувачеві саме його книжок.
Також було розроблено сторінку з детальною інформацією про книгу. На цій сторінці користувач може передивлятись дані про додану книгу та лишати особисті примітки, такі як рейтинг, статус та нотатки.  Варто зазначити, що ця сторінка додатково надає можливість видалення книги з полиці.
У застосунку присутній заголовок, що лишається незмінним для всього додатку та надає користувачеві можливість пошуку книжок, доступу до особистого кабінету та кнопки зміни мови інтерфейсу. Особистий кабінет, надає користувачу доступ до конфіденційної інформації та її редагування. 
За допомогою навігаційного меню користувач також має доступ до головної сторінки, та сторінки додавання нових книг. Головна сторінка відображається першою при вході користувача у систему, на ній надано ознайомчу інформацію та додатково зображено п’ять останніх доданих користувачем книжок.
Сторінка додавання нових книг має нескладний інтерфейс та забезпечує додавання нових книг у систему. Користувач має можливість надати ISBN бажаної книги та у разі, якщо дані надані вірно, додати книгу на полицю. 
 
3.4 Підтримка локалізації

Додаток підтримує локалізацію, забезпечуючи користувацький інтерфейс англійською та українською мовами. Для цього було використано бібліотеку i18n, яка надає зручні інструменти для локалізації текстів у всьому додатку. Завдяки бібліотеці i18n текстові рядки було перекладено на різні мови та забезпечено можливість обрати бажану мову в у заголовку додатку. Наприклад, текстові елементи інтерфейсу, повідомлення про помилки, назви категорій або кнопок, автоматично змінюються відповідно до обраної користувачем мови. 
Для впровадження однакової мови у всьому додатку було створено спеціальний контекст, який відповідає за керування локалізацією. Цей контекст забезпечує доступ до обраної мови у всіх частинах додатку і дозволяє змінювати мову безпосередньо з інтерфейсу. 
Крім того, обрана мова зберігається у локальному сховищі користувача, що дозволяє зберігати вибір мови між сеансами використання додатку. Це забезпечує зручність для користувачів, які можуть встановити свою улюблену мову один раз і не повторювати цей вибір при кожному вході.

3.5 Розробка системи адміністрування

Для програмної системи «Shelfy» було розроблено систему адміністрування. Доступ до цієї системи має лише користувач з роллю «Адміністратор». Система дозволяє отримувати доступ до даних користувачів, видаляти їх профілі та редагувати ролі.  Варто зазначити, що система адміністрування, так само як і головний застосунок, підтримує англійську та українську мови користувацького інтерфейсу.

4 ВИСНОВКИ

Під час виконання даної лабораторної роботи було розроблено клієнтську / front-end частину програмної системи. Ця частина системи підтримує роботу клієнтів у веб-режимі та  забезпечує адміністрування системи. Також у даній роботі було створено UML діаграми прецедентів, компонентів, взаємодії та пакетів за темою програмна система для організації та керування домашньою бібліотекою.
