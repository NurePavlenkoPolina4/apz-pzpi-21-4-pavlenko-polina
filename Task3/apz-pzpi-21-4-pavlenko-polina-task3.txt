1 МЕТА РОБОТИ

Розробити програмне забезпечення для IoT або SmartDevice пристрою. Програмне забезпечення повинно реалізовувати розширену функціональність,  що відповідає концепції IoT або SmartDevice, та забезпечувати взаємодію з  іншими частинами системи. Створити UML діаграми прецедентів, взаємодії, діяльності та пакетів за темою програмна система для організації та керування домашньою бібліотекою.
 
2 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРЕДМЕТНОЇ ОБЛАСТІ
2.1 Розробка UML діаграми прецедентів

UML-діаграма прецедентів є потужним інструментом, що дозволяє не лише візуалізувати функціональність системи, але й зосередитися на взаємодії користувача з нею. У даній лабораторній роботі було розроблено UML-діаграму прецедентів для програмного забезпечення, що реалізовує функціональність,  яка відповідає концепції IoT пристрою.
Головним актором даної системи є «Користувач». Задля захищеного використання програмного забезпечення «Користувач» має спочатку увійти в систему. Для того щоб додати нову книгу на «віртуальну книжкову полицю», тобто зберегти її у додатку, «Користувач» має можливість зчитати ISBN ідентифікаційний номер книги, надавши фотографію, на якій зображено задню частину книжкової палітурки або іншого місця, де на книзі розташовано штрих-код. Якщо всі операції було проведено успішно, «Користувач» має можливість передивитись додані дані у додатку (повну UML-діаграму прецедентів для програмної системи для організації та керування домашньою бібліотекою було наведено у лабораторній роботі 1). 

2.2 Розробка UML діаграми взаємодії

UML діаграма взаємодії використовується для моделювання та візуалізації взаємодії між об'єктами або компонентами в системі, щоб уявити послідовність повідомлень або дій, які передаються між ними у різних сценаріях взаємодії. Розроблена діаграма демонструє взаємодію користувача із програмним забезпеченням для додавання книги на «полицю».
Взаємодія починається із входом користувача у систему. У разі, якщо введені дані невірні – взаємодія завершується. У іншому випадку користувач отримує можливість надати посилання на файл з фотографією штрих коду книги. Якщо штрих-код розпізнано, програмне забезпечення зчитує його та відправляє на сервер, в іншому випадку взаємодію буде завершено. Після того, як сервер проведе всі необхідні маніпуляції із отриманими даними, користувачу буде повернуто інформацію про додану книгу або помилку (якщо вона відбудеться на сервері), після чого взаємодія завершується.  

2.3 Розробка UML діаграми діяльності

Діаграма діяльності відіграє ключову роль у розгляді та створенні програмного забезпечення, дозволяючи візуалізувати послідовність подій в системі від початку до кінця конкретного процесу або функції. У даному проєкті вона використовується для ілюстрації процесу сканування штрих-коду книги, аналізу та обробки отриманих даних. 
Створена діаграма демонструє процес додавання нової книги користувачем за допомогою зчитування штрих-коду. Процес починається зі зчитування системою даних з наданого штрих-коду. Дані, що закодовано у штрих-коді представляють з себе ISBN номер книги, і у разі, якщо зчитування пройшло успішно, дані відправляються на сервер, де відбувається перевірка наявності книги з заданим ISBN номером і у разі, якщо такої книги немає у системі, відбувається запит до Google Books API для отримання розширених даних про задану книгу та збереження їх у базу даних. Після цього книга зберігається у масиві книг користувача і надається вся доступна про неї інформація.

2.4 Розробка UML діаграми пакетів

Діаграма пакетів використовується для візуалізації структури пакетів (групування елементів моделі) та залежностей між ними в системі програмного забезпечення. 
Система складається з головної програми та підключених до неї сервісів, а саме сервіс автентифікації, зчитування штрих-коду та додавання книги. Сервіс автентифікації використовується програмою задля надання користувачам можливості входу у систему, варто зазначити, що даний сервіс використовує розроблену у попередній лабораторній роботі Shelfy API (API програмної системи для організації та керування домашньою бібліотекою).  Головна система має доступ до сервісу зчитування штрих-коду задля того, щоб розпізнавати ISBN книжок з наданих користувачами фотографій. Даний сервіс використовує бібліотеку ZXing для розпізнавання штрих-кодів з фотографій. На останок, сервіс додавання книги на полицю головна програма використовує для відправки даних на сервер та отримання належної відповіді.  
 
3 ІНЖЕНЕРНІ РІШЕННЯ

Для розробки системи додання нових книжок було обрано мову програмування С#. Цю мову було обрано з урахуванням її широких можливостей для розробки консольних програм та зручного доступу до багатьох сторонніх бібліотек.
Для реалізації функціоналу зчитування штрих-кодів була використана бібліотека ZXing. Ця бібліотека забезпечує можливість розпізнавання штрих-кодів з фотографій або зображень. Її логіка роботи полягає у виявленні штрих-кодів на зображенні та ідентифікації відповідного коду, що у даному випадку представляє ISBN код книги. 
Для взаємодії з сервером програма використовувала HTTP запити до розробленого API, яке було створено для проєкту "Shelfy". Це API надає доступ до різних функціональних можливостей системи, включаючи автентифікацію користувачів, управління їх бібліотекою та додавання нових книг. Використання HTTP запитів дозволило ефективно обмінюватися даними між клієнтом та сервером та забезпечити надійну комунікацію між компонентами системи. 
Систему додання нових книжок на полицю було спроектовано з використанням сервісно-орієнтованої архітектури (SOA). Цей підхід означає, що функціонал системи розділений на окремі сервіси, які можуть працювати незалежно один від одного.
Загалом, у системі є кілька ключових компонентів. Головна програма відповідає за основну логіку системи та взаємодію з користувачем. Ця програма взаємодіє з іншими сервісами, такими як сервіс автентифікації, сервіс зчитування штрих-кодів та сервіс додавання книг на полицю. Сервіс автентифікації використовується для перевірки ідентичності користувачів під час входу в систему. Сервіс зчитування штрих-кодів надає можливість сканування штрих-кодів книг та автоматичного їх додавання до бібліотеки користувача. Нарешті, сервіс додавання книг на полицю відповідає за приймання даних про книгу та їх збереження у базі даних. 
Використання SOA дозволило зробити систему більш модульною, легко розширюваною та підтримуваною. Кожен сервіс може бути розгорнутий окремо, що полегшує розвиток та управління системою в цілому. Такий підхід забезпечує гнучкість та швидкість реакції на зміни в потребах користувачів та бізнес-вимогах.

 
4 ВИСНОВКИ

Під час виконання даної лабораторної роботи було розроблено програмне забезпечення, що реалізовує розширену функціональність,  що відповідає концепції IoT або SmartDevice, та забезпечує взаємодію з  іншими частинами системи. Було створено UML діаграми прецедентів, взаємодії, діяльності та пакетів за темою програмна система для організації та керування домашньою бібліотекою.

