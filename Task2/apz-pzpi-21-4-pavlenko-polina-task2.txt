Інженерні рішення

Під час розробки серверної частини проєкту були прийняті ряд інженерних рішень з метою забезпечення ефективності, надійності та масштабовності системи. Одним із головних аспектів було використання специфікації REST при розробці API. Це дозволило створити чіткий та стандартизований інтерфейс для взаємодії з сервером, що у майбутньому спростить розробку клієнтського додатку та забезпечить їх сумісність з будь-якою платформою. 
Під час розробки було використано Node.js та Express.js для створення серверної частини. Node.js надав можливість виконання JavaScript на серверній стороні, що у майбутньому надасть можливість писати код однією мовою як на клієнті. Express.js, у свою чергу, став основним фреймворком для побудови веб-застосунку на Node.js, забезпечуючи ряд корисних функцій та інструментів для розробки зручнго програмного інтерфейсу.
Для побудови серверної частини була обрана архітектурна модель MVC (Model-View-Controller). Це дозволило розділити логіку додатку на три компоненти: модель (Model), представлення (View) та контролер (Controller). 
Модель (Model) відповідає за доступ до даних та бізнес-логіку додатку. У розробленому сервері модель представлена базою даних MongoDB, яка зберігає інформацію про користувачів, книги та інші важливі дані. Модель також включає логіку для взаємодії з цими даними, забезпечуючи CRUD-операції (створення, читання, оновлення, видалення) та інші бізнес-процеси.
Контролер (Controller) відповідає за обробку HTTP-запитів та керування потоком даних у додатку. Він взаємодіє з моделлю для отримання та збереження даних, а також забезпечує відповіді на запити, включаючи передачу даних клієнту. 
Варто зазначити, що використана MVC архітектура є модифікованою, адже для створення користувацького інтерфейсу та відображення даних буде використано бібліотеку React, яка будується на компонентах. Компоненти є аналогом представлень (View) у традиційній архітектурі MVC, проте вони є більш гнучкими та зручними для перевикористання. React компоненти можуть взаємодіяти з сервером, відправляти запити та отримувати дані, а також відображати їх для користувача.
Ця архітектура дозволила забезпечити відокремлення логіки та підвищити розширюваність та підтримку коду.
Для авторизації користувачів у проєкті було використано JWT (JSON Web Token) токени. Філософія JWT полягає в створенні токенів, які можна перевіряти та підтверджувати без необхідності обміну даними з сервером кожен раз при кожному запиті.
JWT токени складаються з трьох частин: заголовка (header), тіла (payload) та підпису (signature). У заголовку вказується тип токена та алгоритм шифрування. Тіло містить корисну інформацію, таку як ідентифікатор користувача та час необхідного оновлення токена. Підпис генерується за допомогою секретного ключа та даних з заголовка та тіла, що гарантує цілісність та автентичність токена. При авторизації користувача в системі йому надається токен, що підтверджує його особу та надає доступ до персональних даних про збережені на полиці книжки. 
У бізнес-логіці сервера проєкту основний акцент робиться на керуванні книгами та бібліотекою користувачів. Основні функції сервера включають додавання нових книг до бібліотеки, можливість пошуку, відсортованого перегляду всіх збережених даних та, як результат, зручного впорядкування домашньої бібліотеки.
Першочерговою задачею сервера є забезпечення можливості додавання нових книг до бібліотеки. Для цього сервер приймає ISBN книги, аналізує отримані дані, за необхідності звертаючись до Google Books Api задля отримання розширеної інформації про книги, за зберігає їх у відповідну колекцію. Додатково сервер забезпечує можливість пошуку книг за різними критеріями, такими як назва, автор та ISBN. Одним із важливих аспектів бізнес-логіки також є відображення всіх книг у бібліотеці користувача, яке може бути відсортоване за різними параметрами, такими як алфавітний порядок, дата додання книги до полиці,  тощо. Сервер також забезпечує можливість зручного впорядкування домашньої бібліотеки. Це включає функції, такі як надання книг статусу "Want to read", "Reading", "Finished", а також додавання рейтингу та нотаток до книг.

