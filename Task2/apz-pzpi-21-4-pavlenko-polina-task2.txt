
1.	Розробка UML діаграми розгортання

Діаграма розгортання системи проєкту демонструє фізичну структуру та розташування компонентів системи на різних пристроях. Це важливий інструмент для аналізу та візуалізації взаємодії між компонентами та їх розподілу. 
Серверна частина застосунку побудована на базі Node.js та фреймворку  Express.js. Його головна функція - обробка HTTP-запитів та взаємодія з базою даних MongoDB для зберігання та отримання даних. Також серверна частина застосунку взаємодіє з Google Books API для отримання додаткової інформації про книги.  Сервер відповідає за бізнес-логіку додатку та забезпечення API, побудованого на базі архітектури REST, для взаємодії з клієнтським і мобільним додатком.
База даних MongoDB використовується для зберігання структурованих даних системи, таких як інформація про користувачів, книги, та полиці. Вона розгорнута на віддаленому сервері баз даних MongoDB Atlas.
IoT-пристрій, написаний на C++, відправляє зчитані зі штрих-кодів дані на сервер через HTTP-запити для подальшої обробки та аналізу.
Клієнтський веб-додаток використовує бібліотеку React.js для побудови клієнтського інтерфейсу. Веб-додаток взаємодіє з сервером через REST API запити для отримання та відображення даних користувачам через веб-сайт.
Мобільний додаток, розроблений на Kotlin, доступний на  мобільному пристрої з операційною системою Android. Він використовує REST API для отримання даних з сервера та взаємодії з системою.
Ця діаграма розгортання допомагає зрозуміти, як фізично розташовані компоненти системи та як вони взаємодіють між собою через мережу для забезпечення функціональності та обслуговування потреб користувачів.

2.	Розробка UML діаграми прецедентів

UML-діаграма прецедентів є інструментом моделювання, який використовується для візуалізації функціональності системи з точки зору користувача.
Головним актором у системі є «Користувач». «Користувач» має можливість реєстрації та подальшого входу у систему, що надає йому можливість керувати менеджментом книжкової полиці. «Користувач» має можливість переглядати останні книжкові доповнення, передивлятись всі збережені у системі книжки, шукати, сортувати та видаляти інформацію, передивлятись розширену інформацію до кожної доданої книги. «Користувач» також має можливість додавати нові книги у два способи: за допомогою IoT пристрою для зчитування штрих-кодів та ручного введення ISBN коду книги у веб або мобільному додатку. Інформацію про кожну збережену книгу «Користувач» може доповнювати такими даними як: рейтинг, статус та особисті нотатки.   
Кожен «Користувач» має доступ до особистого кабінету де він може редагувати конфіденційні дані, такі як електрона пошта та пароль. 
Зокрема актора «Користувач» у системі також присутні актори «Гість» та «Адміністратор». «Гість» має доступ лише до можливостей  реєстрації та входу у систему, а актор «Адміністратор» має доступ до всіх даних системи та має можливості редагування та видалення цієї інформації.
 

3.	Розробка ER діаграми

ER-діаграма (сутність-зв'язок) є важливим інструментом при проєктуванні баз даних. Вона надає можливість детально зрозуміти структуру даних та взаємозв'язки між різними об'єктами в системі.
ER діаграма складається з шести ключових компонентів, на базі яких було розроблено базу даних. 
Ці компоненти включають у себе:
а)	Користувачі.  Цей компонент представляє користувачів системи, він містить основні атрибути, такі як ім'я, електронна пошта, роль (user/admin), які визначають користувачів. Користувачі використовують систему для додавання книг до своєї полиці, оцінки книг, перегляду списку книг тощо.
б)	Автентифікаційний токен. Цей компонент відповідає за токени автентифікації, які використовуються для авторизації користувачів у системі. 
в)	Пристрій. Цей компонент представляє пристрої, які використовуються для сканування штрих-кодів книг.
г)	Книжкова полиця. Цей компонент відповідає за зв’язок відповідних книжок із користувачами. Він містить дані про кількість книг доданих на полицю користувачем.
д)	Книги. Цей компонент містить інформацію про книги, які доступні в системі. Він містить основні атрибути книг, такі як ISBN, назва, автор, рік видання, жанр, опис.
е)	Рейтинг. Цей компонент відповідає за зберігання оцінки та нотатків та статусу  користувача щодо відповідної книги.
Варто зазначити, що завдяки гнучкості MongoDB, яка надає можливість зберігати зв’язані дані в одній колекції і використовувати вкладені об’єкти або масиви для представлення зв’язків між даними, такі сутності як рейтинг, книжкова полиця та автентифікаційний токен не були відтворені у окремі колекції.   

4.	Розробка UML діаграми діяльності

Діаграма діяльності є важливим інструментом в аналізі та проектуванні програмного забезпечення. Вона дозволяє візуалізувати послідовність дій, які відбуваються в системі від початку до кінця конкретного процесу або функції. У цьому проєкті діаграма діяльності використовується для представлення процесу зчитування штрих-коду книги, аналізу та маніпулювання отриманими даними.
Ця діаграма демонструє послідовність кроків, які виконує користувач або пристрій для зчитування штрих-коду, щоб додати нову книгу до системи. Вона починається з активації функції зчитування штрих-коду, після чого відбувається процес сканування штрих-коду за допомогою пристрою. Після успішного зчитування штрих-коду, система переходить до етапу пошуку в базі даних книги з використанням отриманого штрих-коду. Якщо книга знайдена, вона додається до колекції книг у системі. У випадку, якщо книга не знайдена, сервер звертається до Google Books API для отримання і збереження даних про книгу. Після цього книга зберігається на полиці(у масиві книг) користувача.
Діаграма діяльності дозволяє зрозуміти послідовність дій, необхідних для виконання конкретного завдання, та ідентифікувати можливість автоматизації або оптимізації процесу.

5.	Структура проєкту та прийняті інженерні рішення

Під час розробки серверної частини проєкту були прийняті ряд інженерних рішень з метою забезпечення ефективності, надійності та масштабовності системи. Одним із головних аспектів було використання специфікації REST при розробці API. Це дозволило створити чіткий та стандартизований інтерфейс для взаємодії з сервером, що у майбутньому спростить розробку клієнтського додатку та забезпечить їх сумісність з будь-якою платформою. Специфікацію REST API наведено у таблиці 1. 
Під час розробки було використано Node.js та Express.js для створення серверної частини. Node.js надав можливість виконання JavaScript на серверній стороні, що у майбутньому надасть можливість писати код однією мовою як на клієнті. Express.js, у свою чергу, став основним фреймворком для побудови веб-застосунку на Node.js, забезпечуючи ряд корисних функцій та інструментів для розробки зручнго програмного інтерфейсу.
Для побудови серверної частини була обрана архітектурна модель MVC (Model-View-Controller). Це дозволило розділити логіку додатку на три компоненти: модель (Model), представлення (View) та контролер (Controller). 
Модель (Model) відповідає за доступ до даних та бізнес-логіку додатку. У розробленому сервері модель представлена базою даних MongoDB, яка зберігає інформацію про користувачів, книги та інші важливі дані. Модель також включає логіку для взаємодії з цими даними, забезпечуючи CRUD-операції (створення, читання, оновлення, видалення) та інші бізнес-процеси.
Контролер (Controller) відповідає за обробку HTTP-запитів та керування потоком даних у додатку. Він взаємодіє з моделлю для отримання та збереження даних, а також забезпечує відповіді на запити, включаючи передачу даних клієнту. 
Варто зазначити, що використана MVC архітектура є модифікованою, адже для створення користувацького інтерфейсу та відображення даних буде використано бібліотеку React, яка будується на компонентах. Компоненти є аналогом представлень (View) у традиційній архітектурі MVC, проте вони є більш гнучкими та зручними для перевикористання. React компоненти можуть взаємодіяти з сервером, відправляти запити та отримувати дані, а також відображати їх для користувача.
Ця архітектура дозволила забезпечити відокремлення логіки та підвищити розширюваність та підтримку коду.
Для авторизації користувачів у проєкті було використано JWT (JSON Web Token) токени. Філософія JWT полягає в створенні токенів, які можна перевіряти та підтверджувати без необхідності обміну даними з сервером кожен раз при кожному запиті.
JWT токени складаються з трьох частин: заголовка (header), тіла (payload) та підпису (signature). У заголовку вказується тип токена та алгоритм шифрування. Тіло містить корисну інформацію, таку як ідентифікатор користувача та час необхідного оновлення токена. Підпис генерується за допомогою секретного ключа та даних з заголовка та тіла, що гарантує цілісність та автентичність токена. При авторизації користувача в системі йому надається токен, що підтверджує його особу та надає доступ до персональних даних про збережені на полиці книжки (див. дод. А). 
У бізнес-логіці сервера проєкту основний акцент робиться на керуванні книгами та бібліотекою користувачів. Основні функції сервера включають додавання нових книг до бібліотеки (див. дод. Б), можливість пошуку, відсортованого перегляду всіх збережених даних та, як результат, зручного впорядкування домашньої бібліотеки.
Першочерговою задачею сервера є забезпечення можливості додавання нових книг до бібліотеки. Для цього сервер приймає ISBN книги, аналізує отримані дані, за необхідності звертаючись до Google Books Api задля отримання розширеної інформації про книги, за зберігає їх у відповідну колекцію. Додатково сервер забезпечує можливість пошуку книг за різними критеріями, такими як назва, автор та ISBN. Одним із важливих аспектів бізнес-логіки також є відображення всіх книг у бібліотеці користувача, яке може бути відсортоване за різними параметрами, такими як алфавітний порядок, дата додання книги до полиці,  тощо. Сервер також забезпечує можливість зручного впорядкування домашньої бібліотеки. Це включає функції, такі як надання книг статусу "Want to read", "Reading", "Finished", а також додавання рейтингу та нотаток до книг.

Таблиця 1 – Специфікація REST API основного серверного додатку
Сутність	Метод	Посилання	Опис дії
Користувачі	GET	/users/me	Повернення поточного користувача
		/users/	Повернення всіх користувачів системи
		/users/:id	Повернення користувача
	POST	/users/signup	Реєстрація користувача у системи
		/users/login	Вхід користувача у систему
		/users/forgotPassword	Надання тимчасового токена для оновлення пароля
	PATCH	/users/resetPassword/:token	Оновлення забутого пароля
		/users/updatePassword	Оновлення пароля
		/users/updateMe	Оновлення даних поточного користувача
		/users/:id	Оновлення даних користувача
	DELETE	/user/:id	Видалення користувача
Книги	GET	/books/	Повернення всіх книг
		/books/:id	Повернення книги
	POST	/books/	Додання нової книги
Полиця	GET	/shelf/	Повернення всіх книг з полиці
		/shelf/:id	Повернення книг з полиці
	POST	/shelf/	Додання книги на полицю
	PATCH	/shelf/	Оновлення інформації про збережену книгу
		/shelf/remove/:id	Видалення книгу з полиці

